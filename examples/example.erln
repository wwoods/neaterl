-module(example)
-export([fac/1,test/1,anontest/0,comm/0,comm/1,yecc/0,servlet/0,servlet/1])

%Treat ',' and '\n' as same concept (a separator).
%Allow [,\n] at front of list terms

fac(0) -> 1
fac(N) when is_integer(N), N>0 ->
  N * fac(N-1)

-define(MOD(), 36)

test(0) ->
  put(myatom, "hello world")
  erlang:display(get(myatom))
  case true of
    false -> never
    true -> always

test(N) ->
  if
    N == 1 -> true
    true -> ?MODULE:test(N-1)
    
anontest() ->
  J=fun
    (hi,there) -> yo, there, you
    ({what}, 3) -> yup
  io:format("J: ~s~n", [ J(hi,there) ])
  (fun (hi,there) -> yo; ({what}, 3) -> a, b, c)({what}, 3)
  
servlet() ->
  spawn(?MODULE, servlet, [ 0 ])

servlet(Count) ->
  receive 
    prod -> ?MODULE:servlet(Count + 1)
    print -> io:format("She's at ~p, Scotty!~n", [ Count ] ), ?MODULE:servlet(Count)
    after 10000 -> ?MODULE:servlet(0)

comm() ->
  io:format('I am ~p~n', [ self() ])
  PId = spawn(fac, comm, [ true ])
  erlang:monitor(process, PId)
  io:format('~p created ~p~n', [ self(), PId ])
  erlang:display(PId ! { bullocks })
  erlang:display(PId ! { kill, 5 })
  receive
    { 'DOWN', Ref, process, Pid2, Reason } ->
      io:format('~p Exit Detected: ~s~n', [ self(), Reason ] )

comm(true) ->
  receive
    { kill, N } -> 
      io:format('~p ~s ~p~n', [ self(), 'Kill received with ', N ])
      receive 
        { bullocks } ->
          io:format('~p ~s~n', [ self(), 'Bullocks received after kill' ])
          erlang:exit('Bullocks interrupted')
          
        after N*1000 ->
          io:format('~p ~s~n', [ self(), 'Kill executed' ])
          erlang:exit(normal)
  
reload(Module) ->
  compile:file(Module)
  code:purge(Module)
  code:load_file(Module)
  ok
  
yecc() ->
  yecc:file(test_parse)
  reload(test_parse)
  leex:file(test_lex)
  reload(test_lex)
  B=element(2, test_lex:string("[]{}1.4142\n   3.145\n8"))%(a @ b @ c @ b @ c)"))
  io:format("Tokenized: ~p~n", [ B ])
  test_parse:parse(B)
